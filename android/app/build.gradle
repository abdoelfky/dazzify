plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
    id 'org.jetbrains.kotlin.android' version '2.0.10'
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode") ?: "1"
def flutterVersionName = localProperties.getProperty("flutter.versionName") ?: "1.0"

// Load keystore properties
def keystorePropertiesFile = rootProject.file('keystore.properties')
def keystoreProperties = new Properties()
if (keystorePropertiesFile.exists()) {
    keystorePropertiesFile.withReader("UTF-8") { reader ->
        keystoreProperties.load(reader)
    }
}

android {
    namespace = "com.dazzify.app"
    compileSdk = 35
    ndkVersion = flutter.ndkVersion

    compileOptions {
        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled true
        // Sets Java compatibility to Java 8
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId = "com.dazzify.app"
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutterVersionCode.toInteger()
        versionName = flutterVersionName
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    flavorDimensions "dazzify"
    productFlavors {
        prod {
            dimension "dazzify"
            resValue "string", "app_name", "Dazzify"
        }
        dev {
            dimension "dazzify"
            applicationIdSuffix ".dev"
            resValue "string", "app_name", "Dazzify Dev"
        }
        stg {
            dimension "dazzify"
            applicationIdSuffix ".stg"
            resValue "string", "app_name", "Dazzify Stg"
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        staging {
            initWith debug
            applicationIdSuffix ".staging"
            versionNameSuffix "-staging"
            minifyEnabled false
        }
    }
}

flutter {
    source = "../.."
}

dependencies {
    coreLibraryDesugaring ("com.android.tools:desugar_jdk_libs:2.0.3")
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation("com.google.firebase:firebase-bom:32.2.2")
    implementation("com.google.firebase:firebase-analytics-ktx")
}

import com.android.build.OutputFile

android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
        def versionName = variant.versionName
        def versionCode = variant.versionCode
        def flavorName = variant.flavorName // e. g. free
        def buildType = variant.buildType.name // e. g. debug
        def apkName = "Dazzify " + versionName + '-' + versionCode + '-' + flavorName + '-' + output.getFilter(OutputFile.ABI) + '-' + buildType + '.apk';
        output.outputFileName = apkName
    }
}